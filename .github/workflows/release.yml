name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_id: ${{ fromJson(steps.create-release.outputs.result).id }}
      release_upload_url: ${{ fromJson(steps.create-release.outputs.result).upload_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(node -p "require('./zapcut/package.json').version")" >> $GITHUB_OUTPUT
          fi

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ steps.get_version.outputs.VERSION }}`,
              name: `ZapCut v${{ steps.get_version.outputs.VERSION }}`,
              body: 'Release notes for version ${{ steps.get_version.outputs.VERSION }}',
              draft: true,
              prerelease: false
            })
            return {
              id: data.id,
              upload_url: data.upload_url
            }

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
            arch: aarch64
            platform_name: macos-aarch64
            friendly_name: MacBook-AppleSilicon
            ffmpeg_url: https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip
            ffprobe_url: https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip
            
          - platform: macos-latest
            target: x86_64-apple-darwin
            arch: x86_64
            platform_name: macos-x86_64
            friendly_name: MacBook-Intel
            ffmpeg_url: https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip
            ffprobe_url: https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip
            
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            arch: amd64
            platform_name: linux-x86_64
            friendly_name: Linux
            ffmpeg_url: https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
            
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            platform_name: windows-x86_64
            friendly_name: Windows
            ffmpeg_url: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: zapcut/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Import Apple Code Signing Certificate
        if: startsWith(matrix.platform, 'macos')
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: temp-keychain-password
        run: |
          # Only import certificate if it's provided
          if [ -n "$APPLE_CERTIFICATE" ]; then
            echo "Importing Apple Developer certificate..."
            
            # Create a temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
            security set-keychain-settings -lut 21600 build.keychain
            
            # Import certificate to keychain
            echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
            security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/productbuild
            
            # Allow codesign to access the certificate without prompting
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
            
            # Add to search list
            security list-keychains -d user -s build.keychain login.keychain
            
            # Cleanup
            rm certificate.p12
            
            echo "✅ Certificate imported successfully"
            
            # List available identities for debugging
            security find-identity -v -p codesigning
          else
            echo "ℹ️  No certificate provided, will use ad-hoc signing"
          fi

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install frontend dependencies
        working-directory: zapcut
        run: npm ci

      - name: Download FFmpeg for macOS
        if: startsWith(matrix.platform, 'macos')
        working-directory: zapcut/src-tauri
        run: |
          echo "Downloading FFmpeg for ${{ matrix.platform_name }}"
          mkdir -p binaries/${{ matrix.platform_name }}
          cd binaries/${{ matrix.platform_name }}
          
          # Download and extract ffmpeg
          curl -L ${{ matrix.ffmpeg_url }} -o ffmpeg.zip
          unzip -o ffmpeg.zip
          chmod +x ffmpeg
          rm ffmpeg.zip
          
          # Download and extract ffprobe
          curl -L ${{ matrix.ffprobe_url }} -o ffprobe.zip
          unzip -o ffprobe.zip
          chmod +x ffprobe
          rm ffprobe.zip
          
          # Verify
          ./ffmpeg -version
          ./ffprobe -version

      - name: Download FFmpeg for Linux
        if: matrix.platform == 'ubuntu-22.04'
        working-directory: zapcut/src-tauri
        run: |
          echo "Downloading FFmpeg for ${{ matrix.platform_name }}"
          mkdir -p binaries/${{ matrix.platform_name }}
          cd binaries/${{ matrix.platform_name }}
          
          # Download and extract
          wget -q ${{ matrix.ffmpeg_url }}
          tar -xf ffmpeg-release-amd64-static.tar.xz
          mv ffmpeg-*-amd64-static/ffmpeg .
          mv ffmpeg-*-amd64-static/ffprobe .
          chmod +x ffmpeg ffprobe
          rm -rf ffmpeg-*-amd64-static*
          
          # Verify
          ./ffmpeg -version
          ./ffprobe -version

      - name: Download FFmpeg for Windows
        if: matrix.platform == 'windows-latest'
        working-directory: zapcut/src-tauri
        shell: pwsh
        run: |
          Write-Host "Downloading FFmpeg for ${{ matrix.platform_name }}"
          New-Item -ItemType Directory -Force -Path "binaries/${{ matrix.platform_name }}"
          Set-Location "binaries/${{ matrix.platform_name }}"
          
          # Download and extract
          Invoke-WebRequest -Uri "${{ matrix.ffmpeg_url }}" -OutFile "ffmpeg.zip"
          Expand-Archive -Path "ffmpeg.zip" -DestinationPath "." -Force
          
          # Find and move binaries
          $ffmpegDir = Get-ChildItem -Directory -Filter "ffmpeg-*" | Select-Object -First 1
          Move-Item -Path "$($ffmpegDir.FullName)/bin/ffmpeg.exe" -Destination "." -Force
          Move-Item -Path "$($ffmpegDir.FullName)/bin/ffprobe.exe" -Destination "." -Force
          
          # Cleanup
          Remove-Item -Recurse -Force $ffmpegDir
          Remove-Item -Force "ffmpeg.zip"
          
          # Verify
          ./ffmpeg.exe -version
          ./ffprobe.exe -version

      - name: Update Tauri config with platform-specific resources
        working-directory: zapcut/src-tauri
        run: |
          echo "Updating tauri.conf.json for platform: ${{ matrix.platform_name }}"
          python3 update_tauri_config.py --platform ${{ matrix.platform_name }}

      - name: Build frontend
        working-directory: zapcut
        run: npm run build

      - name: Build Tauri app
        working-directory: zapcut
        env:
          # Tell Tauri to skip signing - we'll sign manually afterwards
          APPLE_SIGNING_IDENTITY: "-"
        run: npm run tauri build -- --target ${{ matrix.target }}

      - name: Sign macOS App
        if: startsWith(matrix.platform, 'macos')
        working-directory: zapcut/src-tauri/target/${{ matrix.target }}/release/bundle/macos
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Check if full signing credentials are available
          if [ -n "$APPLE_SIGNING_IDENTITY" ] && [ -n "$APPLE_ID" ] && [ -n "$APPLE_PASSWORD" ] && [ -n "$APPLE_TEAM_ID" ]; then
            echo "Full signing credentials found - signing and notarizing..."
            
            # Path to entitlements file (relative to workspace root)
            ENTITLEMENTS_PATH="${GITHUB_WORKSPACE}/zapcut/src-tauri/entitlements.plist"
            
            echo "Using entitlements file: $ENTITLEMENTS_PATH"
            
            # Remove any existing signatures from the app bundle
            echo "Removing existing signatures..."
            codesign --remove-signature ZapCut.app/Contents/MacOS/zapcut 2>/dev/null || true
            
            # First, sign all executable binaries inside the app bundle (like FFmpeg)
            echo "Signing embedded binaries..."
            find ZapCut.app/Contents/MacOS -type f -perm +111 -not -path "*/ZapCut.app/Contents/MacOS/zapcut" | while read binary; do
              echo "  Signing: $binary"
              codesign --remove-signature "$binary" 2>/dev/null || true
              codesign --force --options runtime \
                --sign "$APPLE_SIGNING_IDENTITY" \
                --timestamp \
                "$binary" || echo "Warning: Failed to sign $binary"
            done
            
            # Sign all .dylib files
            echo "Signing dynamic libraries..."
            find ZapCut.app/Contents -name "*.dylib" -type f | while read dylib; do
              echo "  Signing: $dylib"
              codesign --remove-signature "$dylib" 2>/dev/null || true
              codesign --force --options runtime \
                --sign "$APPLE_SIGNING_IDENTITY" \
                --timestamp \
                "$dylib" || echo "Warning: Failed to sign $dylib"
            done
            
            # Finally, sign the app bundle itself with entitlements
            echo "Signing main app bundle..."
            codesign --force --options runtime \
              --sign "$APPLE_SIGNING_IDENTITY" \
              --entitlements "$ENTITLEMENTS_PATH" \
              --timestamp \
              ZapCut.app
            
            # Verify the signature
            echo "Verifying signature..."
            codesign --verify --deep --strict --verbose=2 ZapCut.app
            
            # Create ZIP for notarization
            echo "Creating archive for notarization..."
            ditto -c -k --keepParent ZapCut.app ZapCut.zip
            
            # Submit for notarization
            echo "Submitting for notarization (this may take several minutes)..."
            xcrun notarytool submit ZapCut.zip \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --wait
            
            # Check notarization status and get detailed logs if it fails
            SUBMISSION_ID=$(xcrun notarytool history --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" | grep -m1 "id:" | awk '{print $2}')
            if [ -n "$SUBMISSION_ID" ]; then
              echo "Getting notarization log for submission: $SUBMISSION_ID"
              xcrun notarytool log "$SUBMISSION_ID" \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_PASSWORD" \
                --team-id "$APPLE_TEAM_ID" || true
            fi
            
            # Staple notarization ticket to the app
            echo "Stapling notarization ticket..."
            xcrun stapler staple ZapCut.app
            
            # Final verification
            echo "Final verification..."
            codesign --verify --verbose ZapCut.app
            spctl -a -vvv -t install ZapCut.app
            
            # Cleanup
            rm ZapCut.zip
            
            echo "✅ App signed and notarized successfully"
          else
            echo "⚠️  No full signing credentials - using ad-hoc signature"
            echo "Note: Users will need to right-click and select 'Open' on first launch"
            
            # Ad-hoc sign (better than nothing)
            codesign --force --deep --sign - ZapCut.app
            
            # Verify ad-hoc signature
            codesign --verify --verbose ZapCut.app
            
            echo "✅ App signed with ad-hoc signature"
          fi

      - name: Rename artifacts (macOS)
        if: startsWith(matrix.platform, 'macos')
        working-directory: zapcut/src-tauri/target/${{ matrix.target }}/release/bundle
        run: |
          # Find the DMG and rename it
          DMG_FILE=$(find dmg -name "*.dmg" | head -n 1)
          if [ -n "$DMG_FILE" ]; then
            VERSION=$(node -p "require('../../../../../package.json').version")
            NEW_NAME="ZapCut_${VERSION}_${{ matrix.friendly_name }}.dmg"
            cp "$DMG_FILE" "$NEW_NAME"
            echo "Renamed: $DMG_FILE -> $NEW_NAME"
            echo "DMG_PATH=$(pwd)/$NEW_NAME" >> $GITHUB_ENV
          fi
          
          # Find the .app.tar.gz and rename it
          APP_TAR=$(find macos -name "*.app.tar.gz" | head -n 1)
          if [ -n "$APP_TAR" ]; then
            VERSION=$(node -p "require('../../../../../package.json').version")
            NEW_APP_NAME="ZapCut_${VERSION}_${{ matrix.friendly_name }}.app.tar.gz"
            cp "$APP_TAR" "$NEW_APP_NAME"
            echo "Renamed: $APP_TAR -> $NEW_APP_NAME"
            echo "APP_TAR_PATH=$(pwd)/$NEW_APP_NAME" >> $GITHUB_ENV
          fi

      - name: Rename artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        working-directory: zapcut/src-tauri/target/${{ matrix.target }}/release/bundle
        shell: pwsh
        run: |
          # Find the MSI and rename it
          $msiFile = Get-ChildItem -Path "msi" -Filter "*.msi" -Recurse | Select-Object -First 1
          if ($msiFile) {
            $version = (Get-Content "../../../../../package.json" | ConvertFrom-Json).version
            $newName = "ZapCut_${version}_${{ matrix.friendly_name }}.msi"
            Copy-Item $msiFile.FullName -Destination $newName
            Write-Host "Renamed: $($msiFile.Name) -> $newName"
            echo "MSI_PATH=$(Get-Location)\$newName" >> $env:GITHUB_ENV
          }
          
          # Find the NSIS installer and rename it
          $nsisFile = Get-ChildItem -Path "nsis" -Filter "*-setup.exe" -Recurse | Select-Object -First 1
          if ($nsisFile) {
            $version = (Get-Content "../../../../../package.json" | ConvertFrom-Json).version
            $newName = "ZapCut_${version}_${{ matrix.friendly_name }}-setup.exe"
            Copy-Item $nsisFile.FullName -Destination $newName
            Write-Host "Renamed: $($nsisFile.Name) -> $newName"
            echo "NSIS_PATH=$(Get-Location)\$newName" >> $env:GITHUB_ENV
          }

      - name: Rename artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        working-directory: zapcut/src-tauri/target/${{ matrix.target }}/release/bundle
        run: |
          # Find the DEB and rename it
          DEB_FILE=$(find deb -name "*.deb" | head -n 1)
          if [ -n "$DEB_FILE" ]; then
            VERSION=$(node -p "require('../../../../../package.json').version")
            NEW_NAME="zapcut_${VERSION}_${{ matrix.friendly_name }}.deb"
            cp "$DEB_FILE" "$NEW_NAME"
            echo "Renamed: $DEB_FILE -> $NEW_NAME"
            echo "DEB_PATH=$(pwd)/$NEW_NAME" >> $GITHUB_ENV
          fi
          
          # Find the AppImage and rename it
          APPIMAGE_FILE=$(find appimage -name "*.AppImage" | head -n 1)
          if [ -n "$APPIMAGE_FILE" ]; then
            VERSION=$(node -p "require('../../../../../package.json').version")
            NEW_NAME="zapcut_${VERSION}_${{ matrix.friendly_name }}.AppImage"
            cp "$APPIMAGE_FILE" "$NEW_NAME"
            echo "Renamed: $APPIMAGE_FILE -> $NEW_NAME"
            echo "APPIMAGE_PATH=$(pwd)/$NEW_NAME" >> $GITHUB_ENV
          fi

      - name: Upload DMG to release (macOS)
        if: startsWith(matrix.platform, 'macos') && env.DMG_PATH != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ${{ env.DMG_PATH }}
          asset_name: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && format('ZapCut_{0}_{1}.dmg', steps.get_version.outputs.VERSION, matrix.friendly_name) || format('ZapCut_{0}_{1}.dmg', 'dev', matrix.friendly_name) }}
          asset_content_type: application/x-apple-diskimage

      - name: Upload APP.TAR.GZ to release (macOS)
        if: startsWith(matrix.platform, 'macos') && env.APP_TAR_PATH != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ${{ env.APP_TAR_PATH }}
          asset_name: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && format('ZapCut_{0}_{1}.app.tar.gz', steps.get_version.outputs.VERSION, matrix.friendly_name) || format('ZapCut_{0}_{1}.app.tar.gz', 'dev', matrix.friendly_name) }}
          asset_content_type: application/gzip

      - name: Upload MSI to release (Windows)
        if: matrix.platform == 'windows-latest' && env.MSI_PATH != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ${{ env.MSI_PATH }}
          asset_name: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && format('ZapCut_{0}_{1}.msi', steps.get_version.outputs.VERSION, matrix.friendly_name) || format('ZapCut_{0}_{1}.msi', 'dev', matrix.friendly_name) }}
          asset_content_type: application/x-msi

      - name: Upload NSIS installer to release (Windows)
        if: matrix.platform == 'windows-latest' && env.NSIS_PATH != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ${{ env.NSIS_PATH }}
          asset_name: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && format('ZapCut_{0}_{1}-setup.exe', steps.get_version.outputs.VERSION, matrix.friendly_name) || format('ZapCut_{0}_{1}-setup.exe', 'dev', matrix.friendly_name) }}
          asset_content_type: application/x-msdownload

      - name: Upload DEB to release (Linux)
        if: matrix.platform == 'ubuntu-22.04' && env.DEB_PATH != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ${{ env.DEB_PATH }}
          asset_name: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && format('zapcut_{0}_{1}.deb', steps.get_version.outputs.VERSION, matrix.friendly_name) || format('zapcut_{0}_{1}.deb', 'dev', matrix.friendly_name) }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload AppImage to release (Linux)
        if: matrix.platform == 'ubuntu-22.04' && env.APPIMAGE_PATH != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: ${{ env.APPIMAGE_PATH }}
          asset_name: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && format('zapcut_{0}_{1}.AppImage', steps.get_version.outputs.VERSION, matrix.friendly_name) || format('zapcut_{0}_{1}.AppImage', 'dev', matrix.friendly_name) }}
          asset_content_type: application/x-executable
