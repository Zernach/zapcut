name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            arch: 'aarch64'
            friendly_name: 'MacBook-AppleSilicon'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            arch: 'x86_64'
            friendly_name: 'MacBook-Intel'
          - platform: 'ubuntu-22.04'
            args: ''
            arch: 'amd64'
            friendly_name: 'Linux'
          - platform: 'windows-latest'
            args: ''
            arch: 'x64'
            friendly_name: 'Windows'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          cache-dependency-path: zapcut/package-lock.json

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Download FFmpeg binaries (macOS Apple Silicon)
        if: matrix.platform == 'macos-latest' && matrix.arch == 'aarch64'
        run: |
          cd zapcut/src-tauri/binaries/macos-aarch64
          curl -L https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip -o ffmpeg.zip
          curl -L https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip -o ffprobe.zip
          unzip -o ffmpeg.zip
          unzip -o ffprobe.zip
          rm ffmpeg.zip ffprobe.zip
          chmod +x ffmpeg ffprobe

      - name: Download FFmpeg binaries (macOS Intel)
        if: matrix.platform == 'macos-latest' && matrix.arch == 'x86_64'
        run: |
          cd zapcut/src-tauri/binaries/macos-x86_64
          curl -L https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip -o ffmpeg.zip
          curl -L https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip -o ffprobe.zip
          unzip -o ffmpeg.zip
          unzip -o ffprobe.zip
          rm ffmpeg.zip ffprobe.zip
          chmod +x ffmpeg ffprobe

      - name: Download FFmpeg binaries (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          cd zapcut/src-tauri/binaries/linux-x86_64
          wget -q https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
          tar -xf ffmpeg-release-amd64-static.tar.xz
          mv ffmpeg-*-amd64-static/ffmpeg .
          mv ffmpeg-*-amd64-static/ffprobe .
          rm -rf ffmpeg-*-amd64-static*
          chmod +x ffmpeg ffprobe

      - name: Download FFmpeg binaries (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          cd zapcut/src-tauri/binaries/windows-x86_64
          Invoke-WebRequest -Uri "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -OutFile "ffmpeg.zip"
          Expand-Archive -Path "ffmpeg.zip" -DestinationPath "."
          $ffmpegDir = Get-ChildItem -Directory -Filter "ffmpeg-*" | Select-Object -First 1
          Move-Item -Path "$($ffmpegDir.FullName)\bin\ffmpeg.exe" -Destination "." -Force
          Move-Item -Path "$($ffmpegDir.FullName)\bin\ffprobe.exe" -Destination "." -Force
          Remove-Item -Recurse -Force $ffmpegDir, "ffmpeg.zip"

      - name: Install frontend dependencies
        run: |
          cd zapcut
          npm ci

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # macOS code signing (optional - comment out if not using)
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          projectPath: zapcut
          tagName: ${{ github.ref_name }}
          releaseName: 'ZapCut ${{ github.ref_name }}'
          releaseBody: 'See the assets below to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Rename release assets to user-friendly names
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          PLATFORM="${{ matrix.platform }}"
          FRIENDLY_NAME="${{ matrix.friendly_name }}"
          TAG="${{ github.ref_name }}"
          
          # Determine patterns for sed based on platform
          if [[ "$PLATFORM" == "macos-latest" ]]; then
            # macOS renaming
            PATTERN1="s/_aarch64/_${FRIENDLY_NAME}/g"
            PATTERN2="s/_x64/_${FRIENDLY_NAME}/g"
          elif [[ "$PLATFORM" == "ubuntu-22.04" ]]; then
            # Linux renaming
            PATTERN1="s/_amd64/_${FRIENDLY_NAME}/g"
          elif [[ "$PLATFORM" == "windows-latest" ]]; then
            # Windows renaming
            PATTERN1="s/_x64-setup/_${FRIENDLY_NAME}-setup/g"
            PATTERN2="s/_x64_/_${FRIENDLY_NAME}_/g"
          fi
          
          # Get assets and rename them
          gh release view "$TAG" --json assets -q '.assets[].name' | while read ASSET_NAME; do
            NEW_NAME="$ASSET_NAME"
            
            # Apply patterns
            if [[ ! -z "$PATTERN1" ]]; then
              NEW_NAME=$(echo "$NEW_NAME" | sed "$PATTERN1")
            fi
            if [[ ! -z "$PATTERN2" ]]; then
              NEW_NAME=$(echo "$NEW_NAME" | sed "$PATTERN2")
            fi
            
            # Update the asset name if it changed
            if [[ "$NEW_NAME" != "$ASSET_NAME" ]]; then
              echo "Renaming: $ASSET_NAME -> $NEW_NAME"
              # Use GitHub API to update asset name
              ASSET_ID=$(gh release view "$TAG" --json assets -q ".assets[] | select(.name==\"$ASSET_NAME\") | .id")
              curl -X PATCH \
                -H "Authorization: token $GH_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID" \
                -d "{\"name\":\"$NEW_NAME\"}"
              echo "âœ“ Renamed to: $NEW_NAME"
            fi
          done

